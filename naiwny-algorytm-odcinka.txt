Naiwny algorytm rysowania odcinka:

Dla zwrócenia uwagi:

delta-x > delta-y

1. idź zmienną x od x0 do x1, albo od zero do delta-x
   2. dla każdego takiego x narysuj punkt o takich współrzędnych:
      3. rysujPunkt(x, y + delta-y*x/delta-x)
      
TO DO:

[ ]   zaprogramuj i sam zobacz, dlaczego jest naiwny.

alternatywnie:

1.

"zwinąć" bitmapę bazową (tę kwadratową powiększoną) tylko w poziomie zgodnie z perspektywą
i zobaczyć, czemu te czerwone punkty nie idą do cholery po "zgrabnych" prostych.
(patrz inna4Gra.cc, wykonywalny inna4Gra)

2.

Im dalej w las, tym więcej drzew, nie tak łatwo, cyk i światło.

Zrobiły się nie ładne proste, ale prawie okręgi / krzywe jak elipsy, eliptyczne?
(patrz inna5Gra.cc wykonywalny analogicznie jw.).

3.

Na razie "naiwne" rozwiązanie, uśredniając 4 kolejne wartości krzywej, tyle
co w tym konkretnym przypadku wynosi okres tych schodków.
(porównaj inna7Gra.cc i inna8Gra.cc wykonywalne analogicznie jw.).

4. 

jak wyżej, ale uśredniając 8 kolejnych wartości, cofnięte o jeden:
   f1[i+3] = ( f[i+0] + ... + f[i+7] ) / 8.0 ; i=0..X1-8
i kosmetycznie i subiektywnie ograniczając wartości brzegowe.
(porównaj inna7Gra.cc i inna9Gra.cc wykonywalne analogicznie jw.).

Dużo więcej z aproksymacji przez średnią wartości nie wycisnę.
   
